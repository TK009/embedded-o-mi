// vim: syntax=c
#include "OMIParser.h"

char * expectedPath = "";
OdfParserEvent expectedEvent = {PE_Path, NULL};

static ErrorResponse pathEventCb(OmiParser *parser, Path *path, OdfParserEvent actualEvent) {
  ck_assert_int_eq(actualEvent.type, expectedEvent.type);
  if (expectedEvent.data != NULL){
    ck_assert_ptr_ne(actualEvent.data, NULL);
    ck_assert_str_eq(actualEvent.data, expectedEvent.data);
  }
  OdfTree odf;
  OdfTree_init(&odf);
  const Path* targetPath = addPath(&odf, expectedPath);
  ck_assert_uint_eq(targetPath->depth, path->depth);
  //ck_assert_uint_eq(targetPath->parent->hashCode, path->parent->hashCode);
  //ck_assert_mem_eq(targetPath->odfId, path->odfId, targetPath->odfIdLength);
  for (int i = 0; i < odf.size; ++i) {
    Path expected = odf.sortedPaths[i];
    Path actualPath = parser->pathStack[i];
    ck_assert_ptr_ne(actualPath.odfId, NULL); 
    char expectedId[50]; char actualId[50];
    memcpy(expectedId, expected.odfId, expected.odfIdLength);
    memcpy(actualId, actualPath.odfId, actualPath.odfIdLength);
    expectedId[expected.odfIdLength] = '\0';
    actualId[actualPath.odfIdLength] = '\0';
    ck_assert_uint_eq(expected.depth, actualPath.depth); 
    //ck_assert_uint_eq(expected.odfIdLength, actualPath.odfIdLength); 
    ck_assert_str_eq(expectedId, actualId);
    ck_assert_uint_eq(expected.hashCode, actualPath.hashCode); 
  }
  free(actualEvent.data);
  return Err_OK;
}

static ErrorResponse noopPathCb(OmiParser *p, Path *a, OdfParserEvent b) {
  (void) p, (void) a, (void) b;
  if (b.data) free(b.data);
  return Err_OK;
}
static char* failStringCallback(OmiParser *p, const char * str, size_t len) {
  (void) p, (void) str, (void) len;
  return NULL;
}

#define createParser(p) \
    OmiParser p ## _allocation; \
    OmiParser *p = &(p ## _allocation); \
    OmiParser_init(p, 0); \
    p->odfCallback = noopPathCb

#define restartParser(p) \
    OmiParser_destroy(p); \
    OmiParser_init(p, 0); \
    p->odfCallback = noopPathCb

#suite OMIParser

#test parserUtilsT
    char * actual = storeTempString(NULL, "testing", 4);
    ck_assert_str_eq(actual, "test");
    free(actual);

    OmiParser pa;
    OmiParser *p = &pa;
    OmiParser_init(p, 0);
    p->stringCallback = failStringCallback;
    p->odfCallback = noopPathCb;
    p->st = OdfState_InfoItem;
    ck_assert_int_eq(runParser(p, "<value unixTime=\"1\""), Err_OOM_String);
    runParser(p, ">");
    p->st = OmiState_OmiEnvelope;
    ck_assert_int_eq(runParser(p, "<read callback=\"h\""), Err_OOM_String);
    runParser(p, ">");
    p->st = OmiState_Verb;
    ck_assert_int_eq(runParser(p, "<requestID>1</requestID>"), Err_OOM_String);
    p->st = OdfState_InfoItem;
    ck_assert_int_eq(runParser(p, "<description>1</description>"), Err_OOM_String);
    p->st = OdfState_InfoItem;
    ck_assert_int_eq(runParser(p, "<value>1</value>"), Err_OOM_String);


#test runXmlParserT
    createParser(p);
    char * ptr;
    ck_assert_ptr_ne(p, NULL);
    char * test1 = "<testingtesting";
    ptr = test1;
    ck_assert_int_eq(runXmlParser(p, &ptr, 4), YXML_OK);
    ck_assert_ptr_eq(test1 + 4, ptr);
  
    OmiParser_init(p, 0);
    char * test2 = "<test>testing";
    ptr = test2;
    ck_assert_int_eq(runXmlParser(p, &ptr, 9), YXML_ELEMSTART);
    ck_assert_ptr_eq(test2 + 6, ptr);

    OmiParser_init(p, 0);
    char * test3 = "<testingtesting";
    ptr = test3;
    ck_assert_int_eq(runXmlParser(p, &ptr, 20), YXML_OK);
    ck_assert_int_eq(strlen(test3), ptr - test3);

#define testState(inputStr, state)\
    ck_assert_int_eq(runParser(p, inputStr), Err_OK);\
    ck_assert_int_eq(p->st, state);

#test writeRequestParsingStatesCallbacksT
    createParser(p);
    p->odfCallback = pathEventCb;
    ck_assert_ptr_ne(p->pathStack[0].odfId, NULL); 
    ck_assert_ptr_eq(&p->pathStack[0], p->currentOdfPath); 
    ck_assert_int_eq(p->st, OmiState_PreOmiEnvelope);

    testState("<?xml version=\"1.0\"?>\n", OmiState_PreOmiEnvelope);

    testState("<omiEnvelope  xmlns=\"http://www.opengroup.org/xsd/omi/2.0/\"  version=\"2.0\" ttl=\"0.0\">\n ", OmiState_OmiEnvelope);
    ck_assert_uint_eq(p->parameters.deadline, 36500u * 24 * 3600);
    ck_assert_int_eq(p->parameters.version, OmiV2_ns);
    
    testState("<write msgformat=\"odf\" >\n ", OmiState_Verb);
    ck_assert_int_eq(p->parameters.requestType, OmiWrite);
    ck_assert_int_eq(p->parameters.format, OmiOdf);

    testState("<msg>\n ", OmiState_Msg);
    testState("<Objects version=\"2.0\" xmlns=\"http://www.opengroup.org/xsd/odf/2.0/\">\n ", OdfState_Objects);
    testState(" <Object type=\"TypeOne\"> \n ", OdfState_Object);
    
    testState(" <id idType=\"TypeTwo\">Object1", OdfState_Id);
    p->tempString[p->tempStringLength] = '\0';
    ck_assert_str_eq(p->tempString, "Object1");

    expectedPath = "Objects/Object1";
    testState("</id> \n", OdfState_ObjectInfoItems);

    expectedPath = "Objects/Object1/description";
    expectedEvent = (OdfParserEvent){PE_Path, "Human readable description."};
    testState("<description>Human readable description.", OdfState_Description);
    testState("</description> \n", OdfState_ObjectInfoItems);

    expectedPath = "Objects/Object1/Sensor1";
    expectedEvent = (OdfParserEvent){PE_Path, NULL};
    testState("<InfoItem name=\"Sensor1\" type=\"sometype\"> \n", OdfState_InfoItem);
    ck_assert(p->currentOdfPath->flags & PF_IsInfoItem);

    expectedPath = "Objects/Object1/Sensor1/description";
    expectedEvent = (OdfParserEvent){PE_Path, "Human readable description."};
    testState("<description>Human readable description.</description> \n", OdfState_InfoItem);
    
    expectedPath = "Objects/Object1/Sensor1/MetaData";
    expectedEvent = (OdfParserEvent){PE_Path, NULL};
    testState("<MetaData> \n", OdfState_MetaData);

    expectedPath = "Objects/Object1/Sensor1/MetaData/MetaData1";
    testState("<InfoItem name=\"MetaData1\"> \n", OdfState_InfoItem);

    expectedEvent = (OdfParserEvent){PE_ValueDateTime, "2019-11-28T14:34:04.519+02:00"};
    testState("<value dateTime=\"2019-11-28T14:34:04.519+02:00\"", OdfState_Value);

    expectedEvent = (OdfParserEvent){PE_ValueType, "xs:integer"};
    testState(" type=\"xs:integer\"", OdfState_Value);

    expectedEvent = (OdfParserEvent){PE_ValueData, "420"};
    testState(">420</value>", OdfState_InfoItem);

    testState("</InfoItem> \n", OdfState_MetaData);
    testState("</MetaData> \n", OdfState_InfoItem);
    ck_assert_str_eq(p->currentOdfPath->odfId, "Sensor1");

    expectedPath = "Objects/Object1/Sensor1";
    expectedEvent = (OdfParserEvent){PE_ValueUnixTime, "42"};
    testState("<value unixTime=\"42\">", OdfState_Value);

    expectedEvent = (OdfParserEvent){PE_ValueData, "420"};
    testState("420</value>", OdfState_InfoItem);

    testState("</InfoItem> \n", OdfState_ObjectInfoItems);
    ck_assert_str_eq(p->currentOdfPath->odfId, "Object1");
    testState("</Object> \n", OdfState_ObjectObjects);
    ck_assert_str_eq(p->currentOdfPath->odfId, "Objects");
    testState("</Objects> \n", OdfState_End);

    ck_assert_int_eq(runParser(p, "</msg> </write> </omiEnvelope>"), Err_End);
    OmiParser_destroy(p);

#test ParsingRequestTypesT
    createParser(p);
    p->st = OmiState_OmiEnvelope;
    testState( "<read interval=\"-1\">", OmiState_Verb);
    ck_assert_int_eq(p->parameters.interval, -1);
    ck_assert_int_eq(p->parameters.requestType, OmiSubscribe);

    p->st = OmiState_OmiEnvelope;
    testState( "<cancel proprietary=\"1\">", OmiState_Verb);
    ck_assert_int_eq(p->parameters.requestType, OmiCancel);
    testState( "<requestID>2</requestID>", OmiState_Verb);

    p->st = OmiState_OmiEnvelope;
    testState( "<call callback=\"http://localhost\">", OmiState_Verb);
    ck_assert_int_eq(p->parameters.requestType, OmiCall);
    ck_assert_str_eq(p->parameters.callbackAddr, "http://localhost");

    OmiParser_destroy(p);

#test ParsingResponseT
    createParser(p);

    // Response
    testState( "<omiEnvelope xmlns=\"http://www.opengroup.org/xsd/omi/2.0/\" token=\"abc\" ttl=\"60.0\" version=\"2.0\">"
               "  <response>", OmiState_Response);
    ck_assert_int_lt(p->parameters.deadline, getTimestamp() + 120);
    ck_assert_int_gt(p->parameters.deadline, getTimestamp() + 10);
    testState( "    <result>", OmiState_Result);
    testState( "      <return description=\"Successfully started subscription\" returnCode=\"200\"/>", OmiState_Return);
    testState( "      <requestID>1", OmiState_RequestID);
    testState( "</requestID> ", OmiState_Return);
    testState( "</result> ", OmiState_Response);
    testState( "</response> ", OdfState_End);
    ck_assert_int_eq(runParser(p, " </omiEnvelope>"), Err_End);

    restartParser(p);
    p->st = OmiState_OmiEnvelope;
    testState( "<response> <result msgformat=\"odf\" > <return returnCode=\"200\"/> <msg> ", OmiState_Msg );

    testState( "<Objects><Object><id>a</id><Object><id>b</id><Object><id>c</id></Object></Object>", OdfState_ObjectObjects );

    OmiParser_destroy(p);


#test ParserPoolT
    for (int i = 0; i < ParserPoolSize; ++i) {
      OmiParser * p = getParser(0);
      ck_assert_ptr_ne(p, NULL);
    }
    OmiParser * p = getParser(0);
    ck_assert_ptr_eq(p, NULL);


#test DepthLimitT
    createParser(p);
    p->st = OdfState_ObjectObjects;
    for (int i = 1; i < OdfDepthLimit; ++i)
        ck_assert_int_eq(runParser(p, "<Object><id>a</id>"), Err_OK);
    ck_assert_int_eq(runParser(p, "<Object><id>a</id>"), Err_TooDeepOdf);
    OmiParser_destroy(p);

#test OmiVersionsT
    ck_assert_int_eq(parseOmiVersion(calcHashCode("http://www.opengroup.org/xsd/omi/1.0/")), OmiV1_0_ns);
    ck_assert_int_eq(parseOmiVersion(calcHashCode("omi.xsd")), OmiV1_ns);
    ck_assert_int_eq(parseOmiVersion(calcHashCode("1.0")), OmiV1);
    ck_assert_int_eq(parseOmiVersion(calcHashCode("2.0")), OmiV2);
    ck_assert_int_eq(parseOmiVersion(calcHashCode("3.0")), OmiV_unknown);


#test InvalidBranchesT
    createParser(p);

    ck_assert_int_eq(runParser(p, "<notOmiEnvelope>"), Err_InvalidElement);

    p->st = OmiState_OmiEnvelope;
    ck_assert_int_eq(runParser(p, "<noRead>"), Err_InvalidElement);

    restartParser(p);
    p->st = OmiState_OmiEnvelope;
    ck_assert_int_eq(runParser(p, "<read msgformat=\"rtf\" "), Err_InvalidDataFormat);
    
    restartParser(p);
    p->st = OmiState_OmiEnvelope;
    ck_assert_int_eq(runParser(p, "<write interval=\"1\""), Err_InvalidAttribute);

    restartParser(p);
    p->st = OmiState_OmiEnvelope;
    ck_assert_int_eq(runParser(p, "<read><not_a_message>"), Err_InvalidElement);

    p->st = OmiState_Return;
    ck_assert_int_eq(runParser(p, "<requestID wrong=\"\">"), Err_InvalidAttribute);

    restartParser(p);
    p->st = OdfState_Objects;
    ck_assert_int_eq(runParser(p, "<Object some=\"1\">"), Err_OK);

    p->st = OdfState_InfoItem;
    ck_assert_int_eq(runParser(p, "<description lang=\"\">"), Err_OK);

    p->st = OdfState_ObjectInfoItems;
    ck_assert_int_eq(runParser(p, "<InfoItem myattr=\"0\">"), Err_OK);

    p->st = OdfState_InfoItem;
    ck_assert_int_eq(runParser(p, "<MetaData wrong=\"\">"), Err_InvalidAttribute);

    restartParser(p);
    p->st = OdfState_InfoItem;
    ck_assert_int_eq(runParser(p, "<value wrong=\"\">"), Err_InvalidAttribute);

    restartParser(p);

    p->st = OdfState_InfoItem;
    ck_assert_int_eq(runParser(p, "<value></fail>"), Err_NonMatchingCloseTag);

    restartParser(p);
    p->st = OmiState_Ready;
    ck_assert_int_eq(runParser(p, "<fail>"), Err_InternalError);

    p->st = OdfState_Object;
    ck_assert_int_eq(runParser(p, "<id>&amp;</id>"), Err_OK);

    p->st = OdfState_Object;
    ck_assert_int_eq(runParser(p, "&aseu;"), Err_InvalidCharRef);

    ck_assert_int_eq(runParser(p, "<oeu="), Err_XmlError);

    restartParser(p);
    OmiParserState strictStates[] = {
      OmiState_Response, OmiState_Result, OmiState_Return, OmiState_Msg, OdfState_Objects,
      OdfState_Object, OdfState_ObjectObjects, OdfState_MetaData, OdfState_InfoItem, OdfState_Value,
      OdfState_End, OdfState_ObjectInfoItems, OmiState_RequestID, OdfState_Description, OdfState_Id};
    for (int i = 0; i < (int)sizeof_array(strictStates); ++i) {
      p->st = strictStates[i];
      ck_assert_int_eq(runParser(p, "<wrong>"), Err_InvalidElement);
    }


    OmiParser_destroy(p);

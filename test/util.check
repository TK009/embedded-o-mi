// vim: syntax=c
#include "utils.h"
#include <stdbool.h>


#suite utils

#test stringLenT
    ck_assert_int_eq(stringLen("test"), 4);
    ck_assert_int_eq(stringLen(""), 0);

#test hashCodeT
    ck_assert_uint_eq(calcHashCode(""),           2166136261);
    ck_assert_uint_eq(calcHashCode("a"),          3826002220);
    ck_assert_uint_eq(calcHashCode("ab"),         1294271946);
    ck_assert_uint_eq(calcHashCode("test"),       2949673445);
    ck_assert_uint_eq(calcHashCode("tset"),       4291670689);
    ck_assert_uint_eq(calcHashCode("MyInfoItem"), 3974904096);
    ck_assert_uint_eq(calcHashCodeL("test", 4),   2949673445);
    ck_assert_uint_eq(calcHashCode("costarring"), calcHashCode("liquid")); // check correctness against known collision

    PartialHash phash = emptyPartialHash;
    calcHashCodeC('a', &phash);
    calcHashCodeC('b', &phash);
    calcHashCodeC('c', &phash);
    ck_assert_uint_eq(phash.hash, calcHashCode("abc"));

#test binarySearchT
#define assertBinarySearchInt(arr, search, expectedRes, expectedRet) \
    needle = search; \
    returnCode = binarySearch(arr, &needle, sizeof(arr)/sizeof(*arr), sizeof(*arr), (compareFunc) int_compare, &result); \
    ck_assert_int_eq(returnCode, expectedRet); \
    ck_assert_int_eq(result, expectedRes) \

    int needle, returnCode, result;

    int arr1[] = {1, 3};
    assertBinarySearchInt(arr1, 0, 0, false);
    assertBinarySearchInt(arr1, 4, 2, false);
    assertBinarySearchInt(arr1, 1, 0, true);
    assertBinarySearchInt(arr1, 3, 1, true);
    assertBinarySearchInt(arr1, 2, 1, false);

    int arr2[] = {1, 3, 8, 11, 27, 50, 60, 70, 80, 90, 99};
    assertBinarySearchInt(arr2, 0,   0,  false);
    assertBinarySearchInt(arr2, 100, 11, false);
    assertBinarySearchInt(arr2, 77,  8,  false);
    assertBinarySearchInt(arr2, 1,   0,  true);
    assertBinarySearchInt(arr2, 3,   1,  true);
    assertBinarySearchInt(arr2, 8,   2,  true);
    assertBinarySearchInt(arr2, 11,  3,  true);
    assertBinarySearchInt(arr2, 27,  4,  true);
    assertBinarySearchInt(arr2, 50,  5,  true);
    assertBinarySearchInt(arr2, 60,  6,  true);
    assertBinarySearchInt(arr2, 70,  7,  true);
    assertBinarySearchInt(arr2, 80,  8,  true);
    assertBinarySearchInt(arr2, 90,  9,  true);
    assertBinarySearchInt(arr2, 99,  10, true);

#test otherT
    ck_assert_uint_gt(getTimestamp(), 1611779299);
    yield();
    ck_assert_int_eq(first1Bit(1), 0);
    ck_assert_int_eq(first1Bit(4), 2);
    ck_assert_int_eq(first1Bit(19904), 6);
    ck_assert_int_eq(first1Bit(0xFFFFFFFF), 0);
    ck_assert_int_eq(first0Bit(0xFFFF0FFF), 12);

    HString strA, strB, costarring, liquid;
    HString_init(&strA, "TestA");
    HString_init(&strB, "TestB");
    HString_init(&costarring, "costarring");
    HString_init(&liquid, "liquid");
    uint aa = 0xFFFFFFFF, bb = 0xFFFFFFFE, a = 0, b = 1, c = 2;
    ck_assert_int_eq(uint_compare(&aa, &bb), 1);
    ck_assert_int_eq(uint_compare(&b, &c), -1);
    ck_assert_int_eq(uint_compare(&a, &a), 0);
    ck_assert_int_eq(HString_compare(&strA, &strA), 0);
    ck_assert_int_eq(HString_compare(&strB, &strB), 0);
    ck_assert_int_eq(HString_compare(&strA, &strB), -1);
    ck_assert_int_eq(HString_compare(&strB, &strA), 1);
    ck_assert_int_eq(HString_compare(&liquid, &costarring), strcmp("liquid", "costarring"));


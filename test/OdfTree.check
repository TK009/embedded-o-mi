// vim: syntax=c
#include "OdfTree.h"

#suite odf

#test pathCompareT
    Path Objects;
    Path_init( &Objects, 1, OdfObject, NULL, "Objects", 0 );
    Path MyObject;  // Objects/MyObject
    Path_init( &MyObject, 2, OdfObject, &Objects, "MyObject", 0 );
    Path MyItem;  // Objects/MyObject/MyItem
    Path_init( &MyItem, 3, OdfInfoItem, &MyObject, "MyItem", 0 );
    Path MyItem2;  // Objects/MyObject/MyItem2
    Path_init( &MyItem2, 3, OdfInfoItem, &MyObject, "MyItem2", 0 );

    Path MyObject2;  // Objects/MyObjecu
    Path_init( &MyObject2, 2, OdfObject, &Objects, "MyObjecu", 0 );
    Path MyItem3; // Objects/MyObjecu/MyItem
    Path_init( &MyItem3, 3, OdfInfoItem, &MyObject2, "MyItem3", 0 );


    // Equals
    ck_assert_int_eq(pathCompare(&Objects, &Objects), 0); 
    ck_assert_int_eq(pathCompare(&MyObject, &MyObject), 0); 
    ck_assert_int_eq(pathCompare(&MyItem, &MyItem), 0); 
    ck_assert_int_eq(pathCompare(&MyItem2, &MyItem2), 0); 
    ck_assert_int_eq(pathCompare(&MyObject2, &MyObject2), 0); 
    ck_assert_int_eq(pathCompare(&MyItem3, &MyItem3), 0); 


    // Lesser than
    ck_assert_int_lt(pathCompare(&Objects, &MyObject), 0); 
    ck_assert_int_lt(pathCompare(&Objects, &MyItem), 0); 
    ck_assert_int_lt(pathCompare(&Objects, &MyItem2), 0); 
    ck_assert_int_lt(pathCompare(&Objects, &MyObject2), 0); 
    ck_assert_int_lt(pathCompare(&Objects, &MyItem3), 0); 

    ck_assert_int_lt(pathCompare(&MyObject, &MyItem), 0); 
    ck_assert_int_lt(pathCompare(&MyObject, &MyItem2), 0); 
    ck_assert_int_lt(pathCompare(&MyObject, &MyObject2), 0); 
    ck_assert_int_lt(pathCompare(&MyObject, &MyItem3), 0); 

    ck_assert_int_lt(pathCompare(&MyItem, &MyItem2), 0); 
    ck_assert_int_lt(pathCompare(&MyItem, &MyObject2), 0); 
    ck_assert_int_lt(pathCompare(&MyItem, &MyItem3), 0); 

    ck_assert_int_lt(pathCompare(&MyItem2, &MyObject2), 0); 
    ck_assert_int_lt(pathCompare(&MyItem2, &MyItem3), 0); 

    ck_assert_int_lt(pathCompare(&MyObject2, &MyItem3), 0); 


    // Greater than
    ck_assert_int_gt(pathCompare(&MyItem3, &Objects  ), 0); 
    ck_assert_int_gt(pathCompare(&MyItem3, &MyObject ), 0); 
    ck_assert_int_gt(pathCompare(&MyItem3, &MyItem   ), 0); 
    ck_assert_int_gt(pathCompare(&MyItem3, &MyItem2  ), 0); 
    ck_assert_int_gt(pathCompare(&MyItem3, &MyObject2), 0); 
    
    ck_assert_int_gt(pathCompare(&MyObject2, &Objects  ), 0); 
    ck_assert_int_gt(pathCompare(&MyObject2, &MyObject ), 0); 
    ck_assert_int_gt(pathCompare(&MyObject2, &MyItem   ), 0); 
    ck_assert_int_gt(pathCompare(&MyObject2, &MyItem2  ), 0); 

    ck_assert_int_gt(pathCompare(&MyItem2, &Objects  ), 0); 
    ck_assert_int_gt(pathCompare(&MyItem2, &MyObject ), 0); 
    ck_assert_int_gt(pathCompare(&MyItem2, &MyItem   ), 0); 

    ck_assert_int_gt(pathCompare(&MyItem, &Objects  ), 0); 
    ck_assert_int_gt(pathCompare(&MyItem, &MyObject ), 0); 

    ck_assert_int_gt(pathCompare(&MyObject, &Objects  ), 0); 



#test addPathT
    OdfTree odf;
    Path paths[20];
    OdfTree_init(&odf, paths, 20);

    ck_assert_int_eq(odf.size, 1);
    
    //char * path = "Objects/MyObject/MyInfoItem"
    const Path* myItem = addPath(&odf, "Objects/MyObject/MyInfoItem", OdfInfoItem);

    ck_assert_int_eq(odf.size, 3);

    const Path st = odf.sortedPaths[0];
    const Path nd = odf.sortedPaths[1];
    const Path rd = odf.sortedPaths[2];

    // Depth
    ck_assert_uint_eq(st.depth, OdfDepth(1, OdfObject));
    ck_assert_uint_eq(nd.depth, OdfDepth(2, OdfObject));
    ck_assert_uint_eq(rd.depth, OdfDepth(3, OdfInfoItem));

    // Parent
    ck_assert_ptr_eq(st.parent, NULL);
    ck_assert_ptr_eq(nd.parent, odf.sortedPaths+0);
    ck_assert_ptr_eq(rd.parent, odf.sortedPaths+1);

    // Id&len
    ck_assert_uint_eq(st.odfIdLength, strlen("Objects"));
    ck_assert_mem_eq(st.odfId, "Objects", st.odfIdLength);
    ck_assert_uint_eq(nd.odfIdLength, strlen("MyObject"));
    ck_assert_mem_eq(nd.odfId, "MyObject", nd.odfIdLength);
    ck_assert_uint_eq(rd.odfIdLength, strlen("MyInfoItem"));
    ck_assert_mem_eq(rd.odfId, "MyInfoItem", rd.odfIdLength);
    
    // idhash
    ck_assert_uint_eq(st.idHashCode, calcHashCode("Objects"));
    ck_assert_uint_eq(nd.idHashCode, calcHashCode("MyObject"));
    ck_assert_uint_eq(rd.idHashCode, calcHashCode("MyInfoItem"));

    // hash
    ck_assert_uint_eq(st.hashCode, st.idHashCode);
    ck_assert_uint_eq(nd.hashCode, nd.idHashCode ^ st.hashCode);
    ck_assert_uint_eq(rd.hashCode, rd.idHashCode ^ nd.hashCode);
    

    // Re-add the same path should only return the pointer to it
    const Path* myItemAgain = addPath(&odf, "Objects/MyObject/MyInfoItem", OdfInfoItem);

    ck_assert_int_eq(odf.size, 3);
    
    ck_assert_ptr_eq(myItem, myItemAgain);

    // Test that array insert works in the middle (_move)
    const Path* myMiddleItem = addPath(&odf, "Objects/AnObj/MyInfoItem", OdfInfoItem);
    myItemAgain = addPath(&odf, "Objects/MyObject/MyInfoItem", OdfInfoItem);

    ck_assert_ptr_ne(myItemAgain, myMiddleItem);

    Path p0 = odf.sortedPaths[0];
    Path p1 = odf.sortedPaths[1];
    Path p2 = odf.sortedPaths[2];
    Path p3 = odf.sortedPaths[3];
    Path p4 = odf.sortedPaths[4];

    ck_assert_uint_eq(p0.idHashCode, calcHashCode("Objects"));
    ck_assert_uint_eq(p1.idHashCode, calcHashCode("AnObj"));
    ck_assert_uint_eq(p2.idHashCode, calcHashCode("MyInfoItem"));
    ck_assert_uint_eq(p3.idHashCode, calcHashCode("MyObject"));
    ck_assert_uint_eq(p4.idHashCode, calcHashCode("MyInfoItem"));

    // Parent
    ck_assert_ptr_eq(p0.parent, NULL);
    ck_assert_ptr_eq(p1.parent, odf.sortedPaths+0); // Objects/AnObj
    ck_assert_ptr_eq(p2.parent, odf.sortedPaths+1); // AnObj/MyInfoItem
    ck_assert_ptr_eq(p3.parent, odf.sortedPaths+0); // Objects/MyObject
    ck_assert_ptr_eq(p4.parent, odf.sortedPaths+3); // MyObject/MyInfoItem

    // Test delete
    removePathSegment(&odf, myMiddleItem);
    p0 = odf.sortedPaths[0];
    p1 = odf.sortedPaths[1];
    p3 = odf.sortedPaths[2];
    p4 = odf.sortedPaths[3];
    ck_assert_ptr_eq(p0.parent, NULL);
    ck_assert_ptr_eq(p1.parent, odf.sortedPaths+0); // Objects/AnObj
    ck_assert_ptr_eq(p3.parent, odf.sortedPaths+0); // Objects/MyObject
    ck_assert_ptr_eq(p4.parent, odf.sortedPaths+2); // MyObject/MyInfoItem

    ck_assert_int_eq(odf.size, 4);
    odf.capacity = 4;
    ck_assert_ptr_eq(addPath(&odf, "Objects/MyObject/MyInfoItem2", OdfInfoItem), NULL);

#test memoryOffsetProblemT
    char* expectedPath = "Objects/Object1/description";
    OdfTree odf; Path paths[20]; char p1[50];
    OdfTree_init(&odf, paths, 20);
    Path * expected = addPath(&odf, expectedPath, OdfDescription);
    memcpy(p1, expected->odfId, expected->odfIdLength);
    p1[expected->odfIdLength] = '\0';
    ck_assert_str_eq(p1, "description");
    

#test ExtraSlashT
    OdfTree odf;
    Path paths[20];
    OdfTree_init(&odf, paths, 20);

    ck_assert_int_eq(odf.size, 1);
    
    addPath(&odf, "/Objects/MyObject/MyInfoItem", OdfInfoItem);

    ck_assert_int_eq(odf.size, 3);

    const Path st = odf.sortedPaths[0];
    const Path nd = odf.sortedPaths[1];
    const Path rd = odf.sortedPaths[2];

    // Depth
    ck_assert_uint_eq(st.depth, OdfDepth(1, OdfObject));
    ck_assert_uint_eq(nd.depth, OdfDepth(2, OdfObject));
    ck_assert_uint_eq(rd.depth, OdfDepth(3, OdfInfoItem));

    // Parent
    ck_assert_ptr_eq(st.parent, NULL);
    ck_assert_ptr_eq(nd.parent, odf.sortedPaths+0);
    ck_assert_ptr_eq(rd.parent, odf.sortedPaths+1);

    // Id&len
    ck_assert_uint_eq(st.odfIdLength, strlen("Objects"));
    ck_assert_mem_eq(st.odfId, "Objects", st.odfIdLength);
    ck_assert_uint_eq(nd.odfIdLength, strlen("MyObject"));
    ck_assert_mem_eq(nd.odfId, "MyObject", nd.odfIdLength);
    ck_assert_uint_eq(rd.odfIdLength, strlen("MyInfoItem"));
    ck_assert_mem_eq(rd.odfId, "MyInfoItem", rd.odfIdLength);

